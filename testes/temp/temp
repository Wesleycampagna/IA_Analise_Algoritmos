def label_encoder(dataset):
    
    #names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'class']
    #dataset = pd.read_csv("../testes/nbayesgabriel/breast-cancer.data", sep=",", header=None, names=names)    
#    dataset = [['vhigh','vhigh',2,'big','low','unacc'],
#                ['vlow','vlow',2,'small','med','unacs'],
#                ['vmedium','vmed',2,'medii','haigh','unacscc']]
    
    #print(dataset)
    
    #print("--------------------------")
    
#    print(dataset)
#    print("--------------------------")
    
    dataset = np.array(dataset)

    
    #print(dataset)
    #print("--------------------------")
    
    #dataset = [*zip(*dataset)]
    dataset = dataset.T
    #print(dataset[6])
    #print("--------------------------")
    
    
    collumns = []
    strings = []
    linhas = len(dataset)
    colunas = len(dataset[0])
    le = preprocessing.LabelEncoder()
    for i in range (0, linhas):
        for j in range(0, colunas):
            #print(dataset[j][i])
            if (isinstance(dataset[i][j], str)):
                if(i not in collumns):
                    collumns.append(i)
                if(dataset[i][j] not in strings):
                    strings.append(dataset[i][j])
        #print(strings)
        #print("-----------------------")
        if(i in collumns):
            #print((dataset[i]))
            #print(strings)
            le.fit(strings)
            (dataset[i]) = le.transform((dataset[i]))
        strings = []
        
        
    #print(dataset)
    #print("-----------------------")
        

    #dataset = [*zip(*dataset)]
    dataset = dataset.T
    
    #dataset = [list(row) for row in dataset]
    dataset = dataset
        
#    print(dataset)
#    print("-----------------------")
#    print(collumns)
                    
        
            
            

    return dataset, collumns


def one_hot_encoder(dataset, collumns):

    one_hot = preprocessing.OneHotEncoder(sparse=True, categories='auto')
    dilatation = 0

    for i in range(len(dataset)):

        if (i in collumns):

            # para extrair a coluna precisou-se do numpy
            dataset = np.array(dataset)
            # cria-se um novo vetor com 1 colula - posição zero
            collumn_to_transform = dataset[:, dilatation]
            # reshape do vetor
            collumn_to_transform.shape = (len(dataset), 1)

            # convert the collumn on binary with oneHotEncoder
            one_hot.fit(collumn_to_transform)
            new_values = one_hot.transform(collumn_to_transform).toarray()

            # return dataset to list to insert new elements
            dataset = dataset.tolist()

            # add new elements
            for i in range(len(dataset)):
                dataset[i][dilatation:dilatation+1] = new_values[i]

            # tentado::dataset = np.insert(dataset, [collumn + dilatation], new_values, axis=1)
            dilatation += (len(new_values[0]))

        else:
            #condição de parada e ajuste
            if dilatation < len(dataset):
                dilatation += 1
            else: break;

    return dataset

##label_encoder()


    for collumn in range(len(datasett[0])):
        if collumn in collumns:
            dataset.append(datasett[:, collumn])
        else:
            notcollumns.append(datasett[:, collumn])

    one_hot.fit(dataset)
    new_values = one_hot.transform(dataset).toarray()

    #dat = new_values
    #notcollumns.T

    dat = []

    for vec in len(new_values):
        np.insert(dat, [vec + ], new_values[vec] , axis=1)  
    
    #print('x: ', len(new_values))

    